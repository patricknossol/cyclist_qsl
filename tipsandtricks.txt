fold lvl 1 : ctrl + (K -> 1)
print_endline (Blist.to_string "\n" Indrule.to_string rules) ;

backtrace: OCAMLRUNPARAM=b (exec...)

Search for proof containing certain rules:
Trying to close node: (?=([^](?!\n\n))*L.Unf.([^](?!\n\n))*R.Unf.([^](?!\n\n))*R.Unf.)(?=([^](?!\n\n))*Pto)



[ ( "-m"
    , Arg.Set_int minbound
    , ": set starting depth for IDFS to <int>, default is "
    ^ string_of_int !minbound )
; ( "-M"
    , Arg.Set_int maxbound
    , ": set maximum depth for IDFS to <int>, 0 disables it, default is "
    ^ string_of_int !maxbound )
; ( "-L"
    , Arg.Int
        (fun n ->
        minbound := n ;
        maxbound := n )
    , ": set both depths to <int>." )
; ("-p", Arg.Set show_proof, ": show proof")
; ("-d", Arg.Set do_debug, ": print debug messages")
; ("-s", Arg.Set Stats.do_statistics, ": print statistics")
; ("-l", Arg.Set_string latex_path, ": write proofs to <file>")
; ( "-t"
    , Arg.Set_int timeout
    , ": set timeout in seconds to <int>, 0 disables it, default is "
    ^ string_of_int !timeout ) ] )
[ ( "-D"
    , Arg.Set_string defs_path
    , ": read inductive definitions from <file>, default is "
    ^ !defs_path )
; ( "-emp"
    , Arg.Set parse_null_as_emp
    , "parse the empty string as the formula [emp] rather than [False], "
    ^ "default is "
    ^ string_of_bool !parse_null_as_emp )
; ( "-Lem"
    , Arg.Int Rules.set_lemma_level
    , ": specify the permissiveness of the lemma application strategy"
    ^ "\n"
    ^ Rules.lemma_option_descr_str () )
; ( "-S"
    , Arg.Set_string cl_sequent
    , ": prove the SL sequent provided in <string>" )
; ( "-test"
    , Arg.Set do_testing
    , ": test qsl" ) ];;

--------TODO---------

Need to do:
proof figure out tags and constraints -> lhs why existential? rhs at all? + lemma rename tag and constr
proof eqs/deqs equal cut for suprema

test on server

maybe with higher prio depending on testing:
(evtl: pto_intro proof existentials and heap equates)
(maybe rationals and no splitting ...?)

maybe:
Ubound intro not own nil!=a * nil!=b * a!=b * a->w * b->c *
                    ListLen[b](w, b) * 1rule to reduce depth?
rest of predicate definitions include again

not:
optimize calls of unify/subsumed, maybe store in sum or something
optimize unify/subsumed with General Assignment Problem? Make time measurements of calls
try new proof call after lemma app. (or maybe even split sum?) for speed up?



Rules for which predicate becomes non precise:
pto_intro_rule
instantiate_pto
pred_intro_rule
cut

Rules for which predicate stays precise (proof):
lhs/rhs_disj_to_symheaps
lhs_instantiate_ex_tags
eq_simplify
deq_simplify
eq_subst_rule
split_sum_rule
split_conform_predicate_summand
constraint_simplify
constraint_match_tag_instantiate
upper_bound_tag_instantiate
bounds_intro
ruf
luf

Rules for which predicate possibly recovers precise (proof):
lhs_instantiate_ex_vars
eq_ex_subst_rule
norm
RList { 
	x->y => RList(x,y) | 
	RList(x,x') * x'->y => RList(x,y) 
} ;

RListLen { 
	x->y => RListLen(x,y) | 
	RListLen(x,x') * x'->y + x'->y => RListLen(x,y) 
} ;

EvenList {
	x=y => EvenList(x,y) |
	x!=y * x->v' * v'->w' * EvenList(w',y) => EvenList(x,y)
} ;

EvenListLen {
	x=y => EvenListLen(x,y) |
	x!=y * x->v' * v'->w' * EvenListLen(w',y) => EvenListLen(x,y)
} ;

List { 
	x->y => List(x,y) | 
	x->x' * List(x',y) => List(x,y) 
} ;

ListLen { 
	x->y => ListLen(x,y) | 
	x->x' * ListLen(x',y) + x->x' => ListLen(x,y) 
} ;

ListO { 
	x->y => ListO(x,y) | 
	x->x' * ListE(x',y) => ListO(x,y) 
} ; 

ListOLen { 
	x->y => ListOLen(x,y) | 
	x->x' * ListELen(x',y) + x->x' => ListOLen(x,y) 
} ; 

ListE { 
	x->x' * ListO(x',y) => ListE(x,y) 
} ; 

ListELen { 
	x->x' * ListOLen(x',y) + x->x' => ListELen(x,y) 
} ; 

PeList { 
	x=y => PeList(x,y) | 
	x->x' * PeList(x',y) => PeList(x,y) 
} ;

PeListLen { 
	x=y => PeListLen(x,y) | 
	x->x' * PeListLen(x',y) => PeListLen(x,y) 
} ;

DLL { 
	x=y * z=w => DLL(x,y,z,w) | 
	x->z',w * DLL(z',y,z,x) => DLL(x,y,z,w) 
} ;

DLLLen { 
	x=y * z=w => DLLLen(x,y,z,w) | 
	x->z',w * DLLLen(z',y,z,x) => DLLLen(x,y,z,w) 
} ;

SLL { 
	x=y => SLL(x,y) | 
	x->x',y' * SLL(x',y) => SLL(x,y) 
} ;

SLLLen { 
	x=y => SLLLen(x,y) | 
	x->x',y' * SLLLen(x',y) => SLLLen(x,y) 
} ;

BSLL { 
	x=y => BSLL(x,y) | 
	BSLL(x,x') * x'->y',y => BSLL(x,y) 
} ;

BSLLLen { 
	x=y => BSLLLen(x,y) | 
	BSLLLen(x,x') * x'->y',y => BSLLLen(x,y) 
} ;

FunQueue {
	x->y',front' * SLL(front', nil) * y'->v',back' * SLL(back',nil) => FunQueue(x)
} ;

FunQueueLen {
	x->y',front' * SLLLen(front', nil) * y'->v',back' * SLLLen(back',nil) => FunQueueLen(x)
} ;

EmptyFunQueue {
	x->y',nil * y'->v',nil => EmptyFunQueue(x)
} ;

EmptyFunQueueLen {
	x->y',nil * y'->v',nil => EmptyFunQueueLen(x)
} ;

funQueueLists {
	front = nil * back = nil => funQueueLists(front, back) |
	front = nil * back->next',v' * funQueueLists(front, next') => funQueueLists(front, back) |
	front->next',v' * funQueueLists(next', back) => funQueueLists(front, back)
} ;

funQueueListsLen {
	front = nil * back = nil => funQueueListsLen(front, back) |
	front = nil * back->next',v' * funQueueListsLen(front, next') => funQueueListsLen(front, back) |
	front->next',v' * funQueueListsLen(next', back) => funQueueListsLen(front, back)
} ;

funQueue {
	q->x',front * x'->v',back * funQueueLists(front, back) => funQueue(q, front, back)
} ;

funQueueLen {
	q->x',front * x'->v',back * funQueueListsLen(front, back) => funQueueLen(q, front, back)
} ;

BinTree { 
	emp => BinTree(x) | 
	x->y',x' * BinTree(y') * BinTree(x') => BinTree(x) 
} ;

BinTreeLen { 
	emp => BinTreeLen(x) | 
	x->y',x' * BinTreeLen(y') * BinTreeLen(x') => BinTreeLen(x) 
} ;

BinTreeSeg {
	x=y => BinTreeSeg(x,y) |
	x->x',y' * BinTreeSeg(x',y) * BinTree(y') => BinTreeSeg(x,y) | 
	x->x',y' * BinTree(x') * BinTreeSeg(y',y) => BinTreeSeg(x,y)
} ;

BinTreeSegLen {
	x=y => BinTreeSegLen(x,y) |
	x->x',y' * BinTreeSegLen(x',y) * BinTreeLen(y') => BinTreeSegLen(x,y) | 
	x->x',y' * BinTreeLen(x') * BinTreeSegLen(y',y) => BinTreeSegLen(x,y)
} ;

BinListFirst { 
	emp => BinListFirst(x) | 
	x->y',x' * BinListFirst(y') => BinListFirst(x) 
} ;

BinListFirstLen { 
	emp => BinListFirstLen(x) | 
	x->y',x' * BinListFirstLen(y') => BinListFirstLen(x) 
} ;

BinListSecond { 
	emp => BinListSecond(x) | 
	x->y',x' * BinListSecond(x') => BinListSecond(x) 
} ;

BinListSecondLen { 
	emp => BinListSecondLen(x) | 
	x->y',x' * BinListSecondLen(x') => BinListSecondLen(x) 
} ;

BinPath {
	x=y => BinPath(x,y) |
	x->x',y' * BinPath(x',y) => BinPath(x,y) |
	x->x',y' * BinPath(y',y) => BinPath(x,y)
} ;

BinPathLen {
	x=y => BinPathLen(x,y) |
	x->x',y' * BinPathLen(x',y) => BinPathLen(x,y) |
	x->x',y' * BinPathLen(y',y) => BinPathLen(x,y)
} ;

ls { 
	x=y => ls(x,y) | 
	x!=y * x->x' * ls(x',y) => ls(x,y) 
} ;

lsLen { 
	x=y => lsLen(x,y) | 
	x!=y * x->x' * lsLen(x',y) + x!=y * x->x' * ls(x',y) => lsLen(x,y) 
} ;

ls2 {
	x=y => ls2(x,y) | 
	x!=y * x->x',v' * ls2(x',y) => ls2(x,y) 
} ;

ls2Len {
	x=y => ls2Len(x,y) | 
	x!=y * x->x',v' * ls2Len(x',y) => ls2Len(x,y) 
} ;

list {
	x=nil => list(x) |
	x->y' * list(y') => list(x)
} ;

listLen {
	x=nil => listLen(x) |
	x->y' * listLen(y') => listLen(x)
} ;

rls {
	x=y => rls(x,y) |
	x!=y * rls(x,z') * z'->y => rls(x,y)
} ;

rlsLen {
	x=y => rlsLen(x,y) |
	x!=y * rlsLen(x,z') * z'->y => rlsLen(x,y)
} ;

bt {
	x=nil => bt(x) |
	x->y',x' * bt(y') * bt(x') => bt(x)
} ;

btLen {
	x=nil => btLen(x) |
	x->y',x' * btLen(y') * btLen(x') => btLen(x)
} ;

btseg {
	x=y => btseg(x,y) |
	x->y',z' * bt(y') * btseg(z',y) => btseg(x,y) |
	x->y',z' * btseg(y',y) * bt(z') => btseg(x,y)
} ;

btsegLen {
	x=y => btsegLen(x,y) |
	x->y',z' * btLen(y') * btsegLen(z',y) => btsegLen(x,y) |
	x->y',z' * btsegLen(y',y) * btLen(z') => btsegLen(x,y)
} ;

cls {
	x->y' * ls(y',x) => cls(x) 
} ;

clsLen {
	x->y' * lsLen(y',x) => clsLen(x) 
} ;

dls { 
	x=y => dls(x,y) | 
	x!=y * x-> y',x' * dls(x',y) => dls(x,y) 
} ;

dlsLen { 
	x=y => dlsLen(x,y) | 
	x!=y * x-> y',x' * dlsLen(x',y) => dlsLen(x,y) 
} ;

lsls {
	x=nil => lsls(x) |
	x->y',x' * lsls(y') * dls(x',nil) => lsls(x)
} ;

lslsLen {
	x=nil => lslsLen(x) |
	x->y',x' * lslsLen(y') * dlsLen(x',nil) => lslsLen(x)
} ;

lsbt {
	x=nil => lsbt(x) |
	x->y',x' * lsbt(x') * bt(y') => lsbt(x)
} ;

lsbtLen {
	x=nil => lsbtLen(x) |
	x->y',x' * lsbtLen(x') * btLen(y') => lsbtLen(x)
} ;

EmptyQueue {
	x->nil,nil => EmptyQueue(x)
} ;

EmptyQueueLen {
	x->nil,nil => EmptyQueueLen(x)
} ;

Queue {
	x->nil,nil => Queue(x) |
	x->head',tail' * ls2(head',tail') * tail'->nil,nil => Queue(x)
} ;

QueueLen {
	x->nil,nil => QueueLen(x) |
	x->head',tail' * ls2Len(head',tail') * tail'->nil,nil => QueueLen(x)
} ;

uf {
	z'=y * ls(x,z') * z'->y => uf(x,y)
} ;

ufLen {
	z'=y * lsLen(x,z') * z'->y => ufLen(x,y)
} ;

ls_set {
	emp => ls_set(x) |
	y'!=nil * ls(y',x) * ls_set(x) => ls_set(x)
} ;

ls_setLen {
	emp => ls_setLen(x) |
	y'!=nil * lsLen(y',x) * ls_setLen(x) => ls_setLen(x)
} ;

tree {
	x = nil => tree(x) |
	x->v',l' * treels(l', nil) => tree(x)
} ;

treeLen {
	x = nil => treeLen(x) |
	x->v',l' * treelsLen(l', nil) => treeLen(x)
} ;

treels {
	x = y => treels(x,y) |
	x != y * x->n',t' * treels(n',y) * tree(t') => treels(x,y)
} ;

treelsLen {
	x = y => treelsLen(x,y) |
	x != y * x->n',t' * treelsLen(n',y) * treeLen(t') => treelsLen(x,y)
} ;

duptree {
	x = nil => duptree(x) |
	x->v',l' * duptreels(l',nil) => duptree(x)
} ;

duptreeLen {
	x = nil => duptreeLen(x) |
	x->v',l' * duptreelsLen(l',nil) => duptreeLen(x)
} ;

duptreels {
	x = y => duptreels(x,y) |
	x != y * x->n',t' * n'->m',t' * duptreels(m',y) * duptree(t') => duptreels(x,y)
} ;

duptreelsLen {
	x = y => duptreelsLen(x,y) |
	x != y * x->n',t' * n'->m',t' * duptreelsLen(m',y) * duptreeLen(t') => duptreelsLen(x,y)
} ;

spTrue {
	emp => spTrue() |
	x'->y' * spTrue() => spTrue()
};

spTrueLen {
	emp => spTrueLen() |
	x'->y' * spTrueLen() => spTrueLen()
};

spTrue2 {
	emp => spTrue2() |
	x'->y',z' * spTrue2() => spTrue2()
};

spTrue2Len {
	emp => spTrue2Len() |
	x'->y',z' * spTrue2Len() => spTrue2Len()
}
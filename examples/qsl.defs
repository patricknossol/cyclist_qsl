P precise {
	a->b * P(a,b) => P(a,b)
} ;

Q precise {
	a->b * Q(a,b) => Q(a,b)
} ;

ListEmpty precise { 
	x=y => ListEmpty(x,y) | 
	x!=y * x->x' * ListEmpty(x',y) => ListEmpty(x,y) 
} ;

ListEmptyLen precise { 
	0 => ListEmptyLen(x,y) | 
	x!=y * x->x' * ListEmptyLen(x',y) + x!=y * x->x' * ListEmpty(x',y) => ListEmptyLen(x,y)
} ;

List precise conform ListLen { 
	x!=y * x->y => List(x,y) | 
	x!=y * x->x' * List(x',y) => List(x,y) 
} ;

ListLen precise { 
	x!=y * x->y => ListLen(x,y) | 
	x!=y * x->x' * ListLen(x',y) + x!=y * x->x' * List(x',y) => ListLen(x,y)
} ;

ListTmp conform ListLenTmp { 
	x->y => ListTmp(x,y) | 
	x->x' * ListTmp(x',y) => ListTmp(x,y) 
} ;

ListLenTmp { 
	x->y => ListLenTmp(x,y) | 
	x->x' * ListLenTmp(x',y) + x->x' * ListTmp(x',y) => ListLenTmp(x,y)
} ;

RListStep precise conform RListLenStep { 
	y!=z * x->y => RListStep(x,y,z) | 
	y!=z * RListStep(x,x',z) * x'->y => RListStep(x,y,z)
} ;

RList precise conform RListLen {
	x!=y * x->y => RList(x,y) |
	x!=y * RListStep(x,x',y) * x'->y => RList(x,y)
} ;

RListLenStep precise { 
	y!=z * x->y => RListLenStep(x,y,z) | 
	y!=z * RListLenStep(x,x',z) * x'->y + y!=z * RListStep(x,x',z) * x'->y => RListLenStep(x,y,z)
} ;

RListLen precise {
	x!=y * x->y => RListLen(x,y) |
	x!=y * RListLenStep(x,x',y) * x'->y + RListStep(x,x',y) * x'->y => RListLen(x,y)
} ;

RListTmp conform RListLenTmp {
	x->y => RListTmp(x,y) |
	RListTmp(x,x') * x'->y => RListTmp(x,y)
} ;

RListLenTmp {
	x->y => RListLenTmp(x,y) |
	RListLenTmp(x,x') * x'->y + RListTmp(x,x') * x'->y => RListLenTmp(x,y)
} ;

ListNilEmpty precise {
	x=nil => ListNilEmpty(x) |
	x->y' * ListNil(y') => ListNilEmpty(x)
} ;

ListNilEmptyLen precise {
	0 => ListNilEmptyLen(x) |
	x->y' * ListNilLen(y') + x->y' * ListNil(y') => ListNilEmptyLen(x)
} ;

ListNil precise conform ListNilLen {
	x->nil => ListNil(x) |
	x->y' * ListNil(y') => ListNil(x)
} ;

ListNilLen precise {
	x->nil => ListNilLen(x) |
	x->y' * ListNilLen(y') + x->y' * ListNil(y') => ListNilLen(x)
} ;

EvenList precise conform EvenListLen {
	x!=y * x->v' * v'->y => EvenList(x,y) |
	x!=y * x->v' * v'->w' * EvenList(w',y) => EvenList(x,y)
} ;

EvenListLen precise {
	x!=y * x->v' * v'->y => EvenListLen(x,y) |
	x!=y * x->v' * v'->w' * EvenListLen(w',y) + 2 * x!=y * x->v' * v'->w' * EvenList(w',y) => EvenListLen(x,y)
} ;

ListO precise conform ListOLen { 
	x!=y * x->y => ListO(x,y) | 
	x!=y * x->x' * ListE(x',y) => ListO(x,y) 
} ; 

ListOLen precise { 
	x!=y * x->y => ListOLen(x,y) | 
	x!=y * x->x' * ListELen(x',y) + x!=y * x->x' * ListE(x',y) => ListOLen(x,y) 
} ; 

ListE precise conform ListELen { 
	x!=y * x->x' * ListO(x',y) => ListE(x,y) 
} ; 

ListELen precise { 
	x!=y * x->x' * ListOLen(x',y) + x!=y * x->x' * ListO(x',y) => ListELen(x,y) 
} ; 

DLLEmpty precise { 
	x=y * z=w => DLLEmpty(x,y,z,w) | 
	x!=y * x->z',w * DLLEmpty(z',y,z,x) => DLLEmpty(x,y,z,w) 
} ;

DLLEmptyLen precise { 
	0 => DLLEmptyLen(x,y,z,w) | 
	x!=y * x->z',w * DLLEmptyLen(z',y,z,x) + x!=y * x->z',w * DLLEmpty(z',y,z,x) => DLLEmptyLen(x,y,z,w) 
} ;

DLL precise conform DLLLen { 
	x!=y * x->y,w * z=x => DLL(x,y,z,w) | 
	x!=y * x->z',w * DLL(z',y,z,x) => DLL(x,y,z,w) 
} ;

DLLLen precise { 
	0 => DLLLen(x,y,z,w) | 
	x!=y * x->z',w * DLLLen(z',y,z,x) + x!=y * x->z',w * DLL(z',y,z,x) => DLLLen(x,y,z,w) 
} ;

SLLEmpty precise { 
	x=y => SLLEmpty(x,y) | 
	x!=y * x->x',y' * SLLEmpty(x',y) => SLLEmpty(x,y) 
} ;

SLLEmptyLen precise { 
	0 => SLLEmptyLen(x,y) | 
	x!=y * x->x',y' * SLLEmptyLen(x',y) + x!=y * x->x',y' * SLLEmpty(x',y) => SLLEmptyLen(x,y) 
} ;

SLL precise conform SLLLen { 
	x!=y * x->y,y' => SLL(x,y) | 
	x!=y * x->x',y' * SLL(x',y) => SLL(x,y) 
} ;

SLLLen { 
	x!=y * x->y,y' => SLLLen(x,y) | 
	x!=y * x->x',y' * SLLLen(x',y) + x!=y * x->x',y' * SLL(x',y) => SLLLen(x,y) 
} ;

BSLLEmptyStep precise { 
	x=y => BSLLEmptyStep(x,y,z) | 
	y!=z * BSLLEmptyStep(x,x',z) * x'->y',y => BSLLEmptyStep(x,y,z) 
} ;

BSLLEmpty precise { 
	x=y => BSLLEmpty(x,y) | 
	x!=y * BSLLEmptyStep(x,x',y) * x'->y',y => BSLLEmpty(x,y) 
} ;

BSLLEmptyStepLen precise { 
	0 => BSLLEmptyStepLen(x,y,z) | 
	y!=z * BSLLEmptyStepLen(x,x',z) * x'->y',y + y!=z * BSLLEmptyStep(x,x',z) * x'->y',y => BSLLEmptyStepLen(x,y,z) 
} ;

BSLLEmptyLen precise { 
	0 => BSLLEmptyLen(x,y) | 
	x!=y * BSLLEmptyStepLen(x,x',y) * x'->y',y => BSLLEmptyLen(x,y) 
} ;

BSLLStep precise conform BSLLStepLen { 
	y!=z * x->y',y => BSLLStep(x,y,z) | 
	y!=z * BSLLStep(x,x',z) * x'->y',y => BSLLStep(x,y,z) 
} ;

BSLL precise conform BSLLLen { 
	x!=y * x->y',y => BSLL(x,y) | 
	x!=y * BSLLStep(x,x',y) * x'->y',y => BSLL(x,y) 
} ;

BSLLStepLen precise { 
	y!=z * x->y',y => BSLLStepLen(x,y,z) | 
	y!=z * BSLLStepLen(x,x',z) * x'->y',y + y!=z * BSLLStep(x,x',z) * x'->y',y => BSLLStepLen(x,y,z) 
} ;

BSLLLen precise { 
	x!=y * x->y',y => BSLLLen(x,y) | 
	x!=y * BSLLStepLen(x,x',y) * x'->y',y => BSLLLen(x,y) 
} ;

BinPath {
	x=y => BinPath(x,y) |
	x->x',y' * BinPath(x',y) => BinPath(x,y) |
	x->x',y' * BinPath(y',y) => BinPath(x,y)
} ;

BinPathLen {
	0 => BinPathLen(x,y) |
	x->x',y' * BinPathLen(x',y) + x->x',y' * BinPath(x',y) => BinPathLen(x,y) |
	x->x',y' * BinPathLen(y',y) + x->x',y' * BinPath(y',y) => BinPathLen(x,y)
} ;

BinTree { 
	emp => BinTree(x) | 
	x->y',x' * BinTree(y') * BinTree(x') => BinTree(x) 
} ;

BinTreeHeight { 
	0 => BinTreeHeight(x) | 
	x->y',x' * BinTreeHeight(y') * BinTree(x') + x->y',x' * BinTree(y') * BinTree(x') => BinTreeHeight(x) |
	x->y',x' * BinTree(y') * BinTreeHeight(x') + x->y',x' * BinTree(y') * BinTree(x') => BinTreeHeight(x) 
} ;

BinTreeSeg {
	x=y => BinTreeSeg(x,y) |
	x->x',y' * BinTreeSeg(x',y) * BinTree(y') => BinTreeSeg(x,y) | 
	x->x',y' * BinTree(x') * BinTreeSeg(y',y) => BinTreeSeg(x,y)
} ;

BinTreeSegHeight {
	0 => BinTreeSegHeight(x,y) |
	x->x',y' * BinTreeSegHeight(x',y) * BinTree(y') + x->x',y' * BinTreeSeg(x',y) * BinTree(y') => BinTreeSegHeight(x,y) | 
	x->x',y' * BinTree(x') * BinTreeSegHeight(y',y) + x->x',y' * BinTree(x') * BinTreeSeg(y',y) => BinTreeSegHeight(x,y)
} ;

BinTreeNilEmpty precise {
	x=nil => BinTreeNilEmpty(x) |
	x->y',x' * BinTreeNilEmpty(y') * BinTreeNilEmpty(x') => BinTreeNilEmpty(x)
} ;

BinTreeNilEmptyHeight precise {
	0 => BinTreeNilEmptyHeight(x) |
	x->y',x' * BinTreeNilEmptyHeight(y') * BinTreeNilEmpty(x') + x->y',x' * BinTreeNilEmpty(y') * BinTreeNilEmpty(x') => BinTreeNilEmptyHeight(x) |
	x->y',x' * BinTreeNilEmpty(y') * BinTreeNilEmptyHeight(x') + x->y',x' * BinTreeNilEmpty(y') * BinTreeNilEmpty(x') => BinTreeNilEmptyHeight(x)
} ;

BinTreeNil precise conform BinTreeNilHeight {
	x->nil,nil => BinTreeNil(x) |
	x->nil,x' * BinTree(x') => BinTreeNil(x) |
	x->y',nil * BinTree(y') => BinTreeNil(x) |
	x->y',x' * BinTreeNil(y') * BinTreeNil(x') => BinTreeNil(x)
} ;

BinTreeNilHeight precise {
	x->nil,nil => BinTreeNilHeight(x) |
	x->nil,x' * BinTreeNilHeight(x') + x->nil,x' * BinTreeNil(x') => BinTreeNilHeight(x) |
	x->y',nil * BinTreeNilHeight(y') + x->y',nil * BinTreeNil(y') => BinTreeNilHeight(x) |
	x->y',x' * BinTreeNilHeight(y') * BinTreeNil(x') + x->y',x' * BinTreeNil(y') * BinTreeNil(x') => BinTreeNilHeight(x) |
	x->y',x' * BinTreeNil(y') * BinTreeNilHeight(x') + x->y',x' * BinTreeNil(y') * BinTreeNil(x') => BinTreeNilHeight(x)
} ;

spTrue {
	emp => spTrue() |
	x'->y' * spTrue() => spTrue()
};

spTrueSize {
	0 => spTrueSize() |
	x'->y' * spTrueSize() + x'->y' * spTrue() => spTrueSize()
};

spTrue2 {
	emp => spTrue2() |
	x'->y',z' * spTrue2() => spTrue2()
};

spTrue2Size {
	0 => spTrue2Size() |
	x'->y',z' * spTrue2Size() + x'->y',z' * spTrue2() => spTrue2Size()
}
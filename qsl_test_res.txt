NOT proved: nil!=x * x->y * RList[a](y, z) * 1. |- RList[a'](x, z) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: RList[b](x, y) * RList[a](y, z) * 1. |- RList[a'](x, z) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: nil!=y * y->z * List[a](x, y) * 1. |- List[a'](x, z) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: List[b](x, y) * List[a](y, z) * 1. |- List[a'](x, z) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: nil!=y * y->z * PeList[a](x, y) * 1. |- PeList[a'](x, z) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: PeList[b](x, y) * PeList[a](y, z) * 1. |- PeList[a'](x, z) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: DLL[a](x, y, z, w) * 1. |- SLL[a'](x, y) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: DLL[a](x, y, z, w) * 1. |- BSLL[a'](z, w) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: DLL[b](x, y, z, w) * DLL[a](a, x, w, b) * 1. |- DLL[a'](a, y, z, b) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: ListO[b](x, y) * ListO[a](y, z) * 1. |- ListE[a'](x, z) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: ListE[b](x, y) * ListE[a](y, z) * 1. |- ListE[a'](x, z) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: ListO[b](y, z) * ListE[a](x, y) * 1. |- ListO[a'](x, z) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: BinListFirst[a](x) * 1. |- BinTree[a'](x) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: BinListSecond[a](x) * 1. |- BinTree[a'](x) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: BinPath[b](x, z) * BinPath[a](z, y) * 1. |- BinPath[a'](x, y) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: BinPath[a](x, y) * 1. |- BinTreeSeg[a'](x, y) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: BinTree[b](y) * BinTreeSeg[a](x, z) * 1. |- BinTree[a'](x) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
0:
nil!=x * x!=z * x->y * ls[a](y, z) * 1. |- ls[a'](x, z) * 1. (ls R.Unf./Simplify) [
1 <{(a, a)}/{}>]
  1:
  nil!=x * x!=z * x->y * ls[a](y, z) * 1. |-
  [b' < a'] : x->w' * ls[b'](w', z) * 1. (UBound Intro) [2 <{(a, a)}/{}>]
    2:
    nil!=x * x!=z * x->y * ls[a](y, z) * 1. |- x->w' * ls[b'](w', z) * 1. (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: ls[b](x, y) * ls[a](y, nil) * 1. |- ls[a'](x, nil) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
NOT proved: ListE[b](x, y) * 1. \/ ListO[a](x, y) * 1. |- List[a'](x, y) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 


DEPTH 1
DEPTH 2
DEPTH 3
0:
nil!=x * x->y * RList[a](y, z) * 1. |- RList[a'](x, z) * 1. (RList R.Unf.) [
1 <{(a, a)}/{}>]
  1:
  nil!=x * x->y * RList[a](y, z) * 1. |-
  [b' < a'] : nil!=w' * w'->z * RList[b'](x, w') * 1. (UBound Intro) [
  2 <{(a, a)}/{}>]
    2:
    nil!=x * x->y * RList[a](y, z) * 1. |-
    nil!=w' * w'->z * RList[b'](x, w') * 1. (RList L.Unf./LHS Inst.,LHS Inst.) [
    3 <{(a, a)}/{(a, b)}>, 4 <{(a, a)}/{(a, b)}>]
      3:
      [b < a] : nil!=x * nil!=y * x!=y * x->y * y->z * 1. |-
      nil!=w' * w'->z * RList[b'](x, w') * 1. (RList R.Unf./Simplify) [
      5 <{(b, b), (a, a)}/{}>]
        5:
        [b < a] : nil!=x * nil!=y * x!=y * x->y * y->z * 1. |-
        nil!=w' * x!=w' * x->w' * w'->z * 1. (Id)
      4:
      [b < a] : nil!=x * nil!=w * x!=w * x->y * w->z * RList[b](y, w) * 1. |-
      nil!=w' * w'->z * RList[b'](x, w') * 1. (Lemma.App) [6 <{(b, b),
                                                              (a, a)}/
                                                           {}>,
      7 <{(b, b), (a, a)}/{(a, b)}>]
        6:
        [b < a] : nil!=x * nil!=w * x!=w * x->y * RList[b](y, w) * 1. |-
        RList[a'](x, w) * 1. (Weaken) [8 <{(b, b)}/{}>]
          8:
          nil!=x * x->y * RList[b](y, w) * 1. |- RList[a'](x, w) * 1. (Subst) [
          9 <{(b, a)}/{}>]
            9:
            nil!=x * x->y * RList[a](y, z) * 1. |- RList[a'](x, z) * 1. (Backl) [0] <pre=
            {(a, a)}>
        7:
        [b < a] : nil!=x * nil!=w * x!=w * w->z * RList[a'](x, w) * 1. |-
        nil!=w' * w'->z * RList[b'](x, w') * 1. (Split Id Summand) [10 <
                                                                    {
                                                                    (b, b),
                                                                    (a, a)}/
                                                                    {}>]
          10: [b < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
0:
RList[b](x, y) * RList[a](y, z) * 1. |- RList[a'](x, z) * 1. (RList R.Unf.) [
1 <{(b, b), (a, a)}/{}>]
  1:
  RList[b](x, y) * RList[a](y, z) * 1. |-
  [b' < a'] : nil!=w' * w'->z * RList[b'](x, w') * 1. (UBound Intro) [
  2 <{(b, b), (a, a)}/{}>]
    2:
    RList[b](x, y) * RList[a](y, z) * 1. |-
    nil!=w' * w'->z * RList[b'](x, w') * 1. (RList L.Unf./LHS Inst.,LHS Inst.) [
    3 <{(b, b), (a, a)}/{(a, c)}>, 4 <{(b, b), (a, a)}/{(a, c)}>]
      3:
      [c < a] : nil!=y * y->z * RList[b](x, y) * 1. |-
      nil!=w' * w'->z * RList[b'](x, w') * 1. (Id)
      4:
      [c < a] : nil!=w * w->z * RList[c](y, w) * RList[b](x, y) * 1. |-
      nil!=w' * w'->z * RList[b'](x, w') * 1. (Lemma.App) [5 <{(c, c),
                                                              (b, b), 
                                                              (a, a)}/
                                                           {}>,
      6 <{(c, c), (a, a)}/{(a, c)}>]
        5:
        [c < a] : nil!=w * RList[c](y, w) * RList[b](x, y) * 1. |-
        RList[a'](x, w) * 1. (Weaken) [7 <{(c, c), (b, b)}/{}>]
          7:
          RList[c](y, w) * RList[b](x, y) * 1. |- RList[a'](x, w) * 1. (Subst) [
          8 <{(c, a), (b, b)}/{}>]
            8:
            RList[b](x, y) * RList[a](y, z) * 1. |- RList[a'](x, z) * 1. (Backl) [0] <pre=
            {(b, b), (a, a)}>
        6:
        [c < a] : nil!=w * w->z * RList[a'](x, w) * 1. |-
        nil!=w' * w'->z * RList[b'](x, w') * 1. (Split Id Summand) [9 <
                                                                    {
                                                                    (c, c),
                                                                    (a, a)}/
                                                                    {}>]
          9: [c < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
0:
nil!=y * y->z * List[a](x, y) * 1. |- List[a'](x, z) * 1. (List R.Unf.) [
1 <{(a, a)}/{}>]
  1:
  nil!=y * y->z * List[a](x, y) * 1. |-
  [b' < a'] : nil!=x * x->w' * List[b'](w', z) * 1. (UBound Intro) [2 <
                                                                    {
                                                                    (a, a)}/
                                                                    {}>]
    2:
    nil!=y * y->z * List[a](x, y) * 1. |-
    nil!=x * x->w' * List[b'](w', z) * 1. (List L.Unf./LHS Inst.,LHS Inst./Simplify,Simplify) [
    3 <{(a, a)}/{(a, b)}>, 4 <{(a, a)}/{(a, b)}>]
      3:
      [b < a] : nil!=x * nil!=y * x!=y * x->y * y->z * 1. |-
      x->w' * List[b'](w', z) * 1. (List R.Unf./Simplify) [5 <{(b, b),
                                                              (a, a)}/
                                                           {}>]
        5:
        [b < a] : nil!=x * nil!=y * x!=y * x->y * y->z * 1. |-
        nil!=w' * x!=w' * x->w' * w'->z * 1. (Id)
      4:
      [b < a] : nil!=x * nil!=y * x!=y * x->w * y->z * List[b](w, y) * 1. |-
      x->w' * List[b'](w', z) * 1. (Lemma.App) [6 <{(b, b), (a, a)}/{}>,
      7 <{(b, b), (a, a)}/{(a, b)}>]
        6:
        [b < a] : nil!=x * nil!=y * x!=y * y->z * List[b](w, y) * 1. |-
        List[a'](w, z) * 1. (Weaken) [8 <{(b, b)}/{}>]
          8:
          nil!=y * y->z * List[b](w, y) * 1. |- List[a'](w, z) * 1. (Subst) [
          9 <{(b, a)}/{}>]
            9:
            nil!=y * y->z * List[a](x, y) * 1. |- List[a'](x, z) * 1. (Backl) [0] <pre=
            {(a, a)}>
        7:
        [b < a] : nil!=x * nil!=y * x!=y * x->w * List[a'](w, z) * 1. |-
        x->w' * List[b'](w', z) * 1. (Split Id Summand) [10 <{(b, b), (a, a)}/
                                                         {}>]
          10: [b < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
0:
List[b](x, y) * List[a](y, z) * 1. |- List[a'](x, z) * 1. (List R.Unf.) [
1 <{(b, b), (a, a)}/{}>]
  1:
  List[b](x, y) * List[a](y, z) * 1. |-
  [b' < a'] : nil!=x * x->w' * List[b'](w', z) * 1. (UBound Intro) [2 <
                                                                    {
                                                                    (b, b),
                                                                    (a, a)}/
                                                                    {}>]
    2:
    List[b](x, y) * List[a](y, z) * 1. |-
    nil!=x * x->w' * List[b'](w', z) * 1. (List L.Unf./LHS Inst.,LHS Inst./Simplify,Simplify) [
    3 <{(b, b), (a, a)}/{(b, c)}>, 4 <{(b, b), (a, a)}/{(b, c)}>]
      3:
      [c < b] : nil!=x * x->y * List[a](y, z) * 1. |-
      x->w' * List[b'](w', z) * 1. (Id)
      4:
      [c < b] : nil!=x * x->w * List[c](w, y) * List[a](y, z) * 1. |-
      x->w' * List[b'](w', z) * 1. (Lemma.App) [5 <{(c, c), (b, b), (a, a)}/
                                                {}>,
      6 <{(c, c), (b, b)}/{(b, c)}>]
        5:
        [c < b] : nil!=x * List[c](w, y) * List[a](y, z) * 1. |-
        List[a'](w, z) * 1. (Weaken) [7 <{(c, c), (a, a)}/{}>]
          7:
          List[c](w, y) * List[a](y, z) * 1. |- List[a'](w, z) * 1. (Subst) [
          8 <{(c, b), (a, a)}/{}>]
            8:
            List[b](x, y) * List[a](y, z) * 1. |- List[a'](x, z) * 1. (Backl) [0] <pre=
            {(b, b), (a, a)}>
        6:
        [c < b] : nil!=x * x->w * List[a'](w, z) * 1. |-
        x->w' * List[b'](w', z) * 1. (Split Id Summand) [9 <{(c, c), (b, b)}/
                                                         {}>]
          9: [c < b] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
0:
nil!=y * y->z * PeList[a](x, y) * 1. |- PeList[a'](x, z) * 1. (PeList R.Unf.) [
1 <{(a, a)}/{}>]
  1:
  nil!=y * y->z * PeList[a](x, y) * 1. |-
  [b' < a'] : nil!=x * x->w' * PeList[b'](w', z) * 1. (UBound Intro) [
  2 <{(a, a)}/{}>]
    2:
    nil!=y * y->z * PeList[a](x, y) * 1. |-
    nil!=x * x->w' * PeList[b'](w', z) * 1. (PeList L.Unf./LHS Inst.,LHS Inst./Simplify,Simplify) [
    3 <{(a, a)}/{(a, b)}>, 4 <{(a, a)}/{(a, b)}>]
      3:
      [b < a] : nil!=y * y->z * 1. |- y->w' * PeList[b'](w', z) * 1. (PeList R.Unf./Simplify) [
      5 <{(b, b), (a, a)}/{}>]
        5: [b < a] : nil!=y * y->z * 1. |- y->z * 1. (Id)
      4:
      [b < a] : nil!=x * nil!=y * x!=y * x->w * y->z * PeList[b](w, y) * 1. |-
      x->w' * PeList[b'](w', z) * 1. (Lemma.App) [6 <{(b, b), (a, a)}/{}>,
      7 <{(b, b), (a, a)}/{(a, b)}>]
        6:
        [b < a] : nil!=x * nil!=y * x!=y * y->z * PeList[b](w, y) * 1. |-
        PeList[a'](w, z) * 1. (Weaken) [8 <{(b, b)}/{}>]
          8:
          nil!=y * y->z * PeList[b](w, y) * 1. |- PeList[a'](w, z) * 1. (Subst) [
          9 <{(b, a)}/{}>]
            9:
            nil!=y * y->z * PeList[a](x, y) * 1. |- PeList[a'](x, z) * 1. (Backl) [0] <pre=
            {(a, a)}>
        7:
        [b < a] : nil!=x * nil!=y * x!=y * x->w * PeList[a'](w, z) * 1. |-
        x->w' * PeList[b'](w', z) * 1. (Split Id Summand) [10 <{(b, b),
                                                               (a, a)}/
                                                           {}>]
          10: [b < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
0:
PeList[b](x, y) * PeList[a](y, z) * 1. |- PeList[a'](x, z) * 1. (PeList L.Unf./LHS Inst.,LHS Inst./Simplify) [
1 <{(b, b), (a, a)}/{(b, c)}>, 2 <{(b, b), (a, a)}/{(b, c)}>]
  1: [c < b] : PeList[a](y, z) * 1. |- PeList[a'](y, z) * 1. (Id)
  2:
  [c < b] : nil!=x * x->w * PeList[c](w, y) * PeList[a](y, z) * 1. |-
  PeList[a'](x, z) * 1. (PeList R.Unf./Simplify) [3 <{(c, c), (b, b), (a, a)}/
                                                  {}>]
    3:
    [c < b] : nil!=x * x->w * PeList[c](w, y) * PeList[a](y, z) * 1. |-
    [b' < a'] : x->w' * PeList[b'](w', z) * 1. (UBound Intro) [4 <{(c, c),
                                                                  (b, b),
                                                                  (a, a)}/
                                                               {}>]
      4:
      [c < b] : nil!=x * x->w * PeList[c](w, y) * PeList[a](y, z) * 1. |-
      x->w' * PeList[b'](w', z) * 1. (Lemma.App) [5 <{(c, c), (b, b), (a, a)}/
                                                  {}>,
      6 <{(c, c), (b, b)}/{(b, c)}>]
        5:
        [c < b] : nil!=x * PeList[c](w, y) * PeList[a](y, z) * 1. |-
        PeList[a'](w, z) * 1. (Weaken) [7 <{(c, c), (a, a)}/{}>]
          7:
          PeList[c](w, y) * PeList[a](y, z) * 1. |- PeList[a'](w, z) * 1. (Subst) [
          8 <{(c, b), (a, a)}/{}>]
            8:
            PeList[b](x, y) * PeList[a](y, z) * 1. |- PeList[a'](x, z) * 1. (Backl) [0] <pre=
            {(b, b), (a, a)}>
        6:
        [c < b] : nil!=x * x->w * PeList[a'](w, z) * 1. |-
        x->w' * PeList[b'](w', z) * 1. (Split Id Summand) [9 <{(c, c),
                                                              (b, b)}/
                                                           {}>]
          9: [c < b] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
0:
DLL[a](x, y, z, w) * 1. |- SLL[a'](x, y) * 1. (DLL L.Unf./LHS Inst.,LHS Inst./Simplify) [
1 <{(a, a)}/{(a, b)}>, 2 <{(a, a)}/{(a, b)}>]
  1:
  [b < a] : 1. |- SLL[a'](y, y) * 1. (SLL R.Unf.) [3 <{(b, b), (a, a)}/{}>]
    3: [b < a] : 1. |- 1. (Id)
  2:
  [b < a] : nil!=x * x->a, w * DLL[b](a, y, z, x) * 1. |- SLL[a'](x, y) * 1. (SLL R.Unf./Simplify) [
  4 <{(b, b), (a, a)}/{}>]
    4:
    [b < a] : nil!=x * x->a, w * DLL[b](a, y, z, x) * 1. |-
    [b' < a'] : x->w', z' * SLL[b'](w', y) * 1. (UBound Intro) [5 <{(b, b),
                                                                   (a, a)}/
                                                                {}>]
      5:
      [b < a] : nil!=x * x->a, w * DLL[b](a, y, z, x) * 1. |-
      x->w', z' * SLL[b'](w', y) * 1. (Lemma.App) [6 <{(b, b), (a, a)}/{}>,
      7 <{(b, b), (a, a)}/{(a, b)}>]
        6:
        [b < a] : nil!=x * DLL[b](a, y, z, x) * 1. |- SLL[a'](a, y) * 1. (Weaken) [
        8 <{(b, b)}/{}>]
          8:
          DLL[b](a, y, z, x) * 1. |- SLL[a'](a, y) * 1. (Subst) [9 <{(b, a)}/
                                                                 {}>]
            9:
            DLL[a](x, y, z, w) * 1. |- SLL[a'](x, y) * 1. (Backl) [0] <pre=
            {(a, a)}>
        7:
        [b < a] : nil!=x * x->a, w * SLL[a'](a, y) * 1. |-
        x->w', z' * SLL[b'](w', y) * 1. (Split Id Summand) [10 <{(b, b),
                                                                (a, a)}/
                                                            {}>]
          10: [b < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
0:
DLL[a](x, y, z, w) * 1. |- BSLL[a'](z, w) * 1. (DLL L.Unf./LHS Inst.,LHS Inst./Simplify) [
1 <{(a, a)}/{(a, b)}>, 2 <{(a, a)}/{(a, b)}>]
  1:
  [b < a] : 1. |- BSLL[a'](w, w) * 1. (BSLL R.Unf.) [3 <{(b, b), (a, a)}/{}>]
    3: [b < a] : 1. |- 1. (Id)
  2:
  [b < a] : nil!=x * x->a, w * DLL[b](a, y, z, x) * 1. |- BSLL[a'](z, w) * 1. (BSLL R.Unf.) [
  4 <{(b, b), (a, a)}/{}>]
    4:
    [b < a] : nil!=x * x->a, w * DLL[b](a, y, z, x) * 1. |-
    [b' < a'] : nil!=w' * w'->z', w * BSLL[b'](z, w') * 1. (UBound Intro) [
    5 <{(b, b), (a, a)}/{}>]
      5:
      [b < a] : nil!=x * x->a, w * DLL[b](a, y, z, x) * 1. |-
      nil!=w' * w'->z', w * BSLL[b'](z, w') * 1. (Lemma.App) [6 <{(b, b),
                                                                 (a, a)}/
                                                              {}>,
      7 <{(b, b), (a, a)}/{(a, b)}>]
        6:
        [b < a] : nil!=x * DLL[b](a, y, z, x) * 1. |- BSLL[a'](z, x) * 1. (Weaken) [
        8 <{(b, b)}/{}>]
          8:
          DLL[b](a, y, z, x) * 1. |- BSLL[a'](z, x) * 1. (Subst) [9 <
                                                                  {(b, a)}/
                                                                  {}>]
            9:
            DLL[a](x, y, z, w) * 1. |- BSLL[a'](z, w) * 1. (Backl) [0] <pre=
            {(a, a)}>
        7:
        [b < a] : nil!=x * x->a, w * BSLL[a'](z, x) * 1. |-
        nil!=w' * w'->z', w * BSLL[b'](z, w') * 1. (Split Id Summand) [
        10 <{(b, b), (a, a)}/{}>]
          10: [b < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
0:
DLL[b](x, y, z, w) * DLL[a](a, x, w, b) * 1. |- DLL[a'](a, y, z, b) * 1. (DLL L.Unf./LHS Inst.,LHS Inst./Simplify) [
1 <{(b, b), (a, a)}/{(a, c)}>, 2 <{(b, b), (a, a)}/{(a, c)}>]
  1: [c < a] : DLL[b](a, y, z, b) * 1. |- DLL[a'](a, y, z, b) * 1. (Id)
  2:
  [c < a] : nil!=a * a->c, b * DLL[c](c, x, w, a) * DLL[b](x, y, z, w) * 1. |-
  DLL[a'](a, y, z, b) * 1. (DLL R.Unf./Simplify) [3 <{(c, c), (b, b), (a, a)}/
                                                  {}>]
    3:
    [c < a] : nil!=a * a->c, b * DLL[c](c, x, w, a) * DLL[b](x, y, z, w) * 1. |-
    [b' < a'] : a->w', b * DLL[b'](w', y, z, a) * 1. (UBound Intro) [
    4 <{(c, c), (b, b), (a, a)}/{}>]
      4:
      [c < a] : nil!=a * a->c, b * DLL[c](c, x, w, a) * DLL[b](x, y, z, w) *
                1. |-
      a->w', b * DLL[b'](w', y, z, a) * 1. (Lemma.App) [5 <{(c, c), (b, b),
                                                           (a, a)}/{}>,
      6 <{(c, c), (a, a)}/{(a, c)}>]
        5:
        [c < a] : nil!=a * DLL[c](c, x, w, a) * DLL[b](x, y, z, w) * 1. |-
        DLL[a'](c, y, z, a) * 1. (Weaken) [7 <{(c, c), (b, b)}/{}>]
          7:
          DLL[c](c, x, w, a) * DLL[b](x, y, z, w) * 1. |-
          DLL[a'](c, y, z, a) * 1. (Subst) [8 <{(c, a), (b, b)}/{}>]
            8:
            DLL[b](x, y, z, w) * DLL[a](a, x, w, b) * 1. |-
            DLL[a'](a, y, z, b) * 1. (Backl) [0] <pre={(b, b), (a, a)}>
        6:
        [c < a] : nil!=a * a->c, b * DLL[a'](c, y, z, a) * 1. |-
        a->w', b * DLL[b'](w', y, z, a) * 1. (Split Id Summand) [9 <{
                                                                    (c, c),
                                                                    (a, a)}/
                                                                 {}>]
          9: [c < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
DEPTH 4
DEPTH 5
DEPTH 6
0:
ListO[b](x, y) * ListO[a](y, z) * 1. |- ListE[a'](x, z) * 1. (ListE R.Unf.) [
1 <{(b, b), (a, a)}/{}>]
  1:
  ListO[b](x, y) * ListO[a](y, z) * 1. |-
  [b' < a'] : nil!=x * x->w' * ListO[b'](w', z) * 1. (UBound Intro) [
  2 <{(b, b), (a, a)}/{}>]
    2:
    ListO[b](x, y) * ListO[a](y, z) * 1. |-
    nil!=x * x->w' * ListO[b'](w', z) * 1. (ListO L.Unf./LHS Inst.,LHS Inst./Simplify,Simplify) [
    3 <{(b, b), (a, a)}/{(b, c)}>, 4 <{(b, b), (a, a)}/{(b, c)}>]
      3:
      [c < b] : nil!=x * x->y * ListO[a](y, z) * 1. |-
      x->w' * ListO[b'](w', z) * 1. (Id)
      4:
      [c < b] : nil!=x * x->w * ListE[c](w, y) * ListO[a](y, z) * 1. |-
      x->w' * ListO[b'](w', z) * 1. (ListO R.Unf./Simplify) [5 <{(c, c),
                                                                (b, b),
                                                                (a, a)}/
                                                             {}>]
        5:
        [c < b] : nil!=x * x->w * ListE[c](w, y) * ListO[a](y, z) * 1. |-
        [a' < b'] : nil!=w' * x!=w' * x->w' * w'->y' * ListE[a'](y', z) * 1. (UBound Intro) [
        6 <{(c, c), (b, b), (a, a)}/{}>]
          6:
          [c < b] : nil!=x * x->w * ListE[c](w, y) * ListO[a](y, z) * 1. |-
          nil!=w' * x!=w' * x->w' * w'->y' * ListE[a'](y', z) * 1. (ListE L.Unf./LHS Inst.) [
          7 <{(c, c), (b, b), (a, a)}/{(c, d), (b, d), (b, c)}>]
            7:
            [d < c; c < b] : nil!=x * nil!=w * x!=w * x->w * w->a *
                             ListO[d](a, y) * ListO[a](y, z) * 1. |-
            nil!=w' * x!=w' * x->w' * w'->y' * ListE[a'](y', z) * 1. (Lemma.App) [
            8 <{(d, d), (c, c), (b, b), (a, a)}/{}>,
            9 <{(d, d), (c, c), (b, b)}/{(c, d), (b, d), (b, c)}>]
              8:
              [d < c; c < b] : nil!=x * nil!=w * x!=w * ListO[d](a, y) *
                               ListO[a](y, z) * 1. |-
              ListE[b'](a, z) * 1. (R.Trans.Ex) [10 <{(d, d), (c, c), 
                                                     (b, b), (a, a)}/
                                                 {}>]
                10:
                [d < c; c < b] : nil!=x * nil!=w * x!=w * ListO[d](a, y) *
                                 ListO[a](y, z) * 1. |-
                ListE[a'](a, z) * 1. (Weaken) [11 <{(d, d), (a, a)}/{}>]
                  11:
                  ListO[d](a, y) * ListO[a](y, z) * 1. |-
                  ListE[a'](a, z) * 1. (Subst) [12 <{(d, b), (a, a)}/{}>]
                    12:
                    ListO[b](x, y) * ListO[a](y, z) * 1. |-
                    ListE[a'](x, z) * 1. (Backl) [0] <pre={(b, b), (a, a)}>
              9:
              [d < c; c < b] : nil!=x * nil!=w * x!=w * x->w * w->a *
                               ListE[b'](a, z) * 1. |-
              nil!=w' * x!=w' * x->w' * w'->y' * ListE[a'](y', z) * 1. (Split Id Summand) [
              13 <{(d, d), (c, c), (b, b)}/{}>]
                13: [d < c; c < b] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
DEPTH 4
DEPTH 5
0:
ListE[b](x, y) * ListE[a](y, z) * 1. |- ListE[a'](x, z) * 1. (ListE L.Unf./LHS Inst.) [
1 <{(b, b), (a, a)}/{(b, c)}>]
  1:
  [c < b] : nil!=x * x->w * ListO[c](w, y) * ListE[a](y, z) * 1. |-
  ListE[a'](x, z) * 1. (ListO L.Unf./LHS Inst.,LHS Inst.) [2 <{(c, c),
                                                              (b, b), 
                                                              (a, a)}/
                                                           {(c, d), (b, d),
                                                           (b, c)}>,
  3 <{(c, c), (b, b), (a, a)}/{(c, d), (b, d), (b, c)}>]
    2:
    [d < c; c < b] : nil!=x * nil!=w * x!=w * x->w * w->y * ListE[a](y, z) *
                     1. |-
    ListE[a'](x, z) * 1. (ListE R.Unf./Simplify) [4 <{(d, d), (c, c), 
                                                     (b, b), (a, a)}/
                                                  {}>]
      4:
      [d < c; c < b] : nil!=x * nil!=w * x!=w * x->w * w->y *
                       ListE[a](y, z) * 1. |-
      [b' < a'] : x->w' * ListO[b'](w', z) * 1. (UBound Intro) [5 <{(d, d),
                                                                   (c, c),
                                                                   (b, b),
                                                                   (a, a)}/
                                                                {}>]
        5:
        [d < c; c < b] : nil!=x * nil!=w * x!=w * x->w * w->y *
                         ListE[a](y, z) * 1. |-
        x->w' * ListO[b'](w', z) * 1. (ListO R.Unf./Simplify) [6 <{(d, d),
                                                                  (c, c),
                                                                  (b, b),
                                                                  (a, a)}/
                                                               {}>]
          6:
          [d < c; c < b] : nil!=x * nil!=w * x!=w * x->w * w->y *
                           ListE[a](y, z) * 1. |-
          [a' < b'] : nil!=w' * x!=w' * x->w' * w'->y' * ListE[a'](y', z) *
                      1. (Split Id Summand) [7 <{(d, d), (c, c), (b, b)}/{}>]
            7: [d < c; c < b] :  |- [a' < b'] :  (Id)
    3:
    [d < c; c < b] : nil!=x * nil!=w * x!=w * x->w * w->a * ListE[d](a, y) *
                     ListE[a](y, z) * 1. |-
    ListE[a'](x, z) * 1. (Lemma.App) [8 <{(d, d), (c, c), (b, b), (a, a)}/{}>,
    9 <{(d, d), (c, c), (b, b)}/{(c, d), (b, d), (b, c)}>]
      8:
      [d < c; c < b] : nil!=x * nil!=w * x!=w * ListE[d](a, y) *
                       ListE[a](y, z) * 1. |-
      ListE[b'](a, z) * 1. (R.Trans.Ex) [10 <{(d, d), (c, c), (b, b), (a, a)}/
                                         {}>]
        10:
        [d < c; c < b] : nil!=x * nil!=w * x!=w * ListE[d](a, y) *
                         ListE[a](y, z) * 1. |-
        ListE[a'](a, z) * 1. (Weaken) [11 <{(d, d), (a, a)}/{}>]
          11:
          ListE[d](a, y) * ListE[a](y, z) * 1. |- ListE[a'](a, z) * 1. (Subst) [
          12 <{(d, b), (a, a)}/{}>]
            12:
            ListE[b](x, y) * ListE[a](y, z) * 1. |- ListE[a'](x, z) * 1. (Backl) [0] <pre=
            {(b, b), (a, a)}>
      9:
      [d < c; c < b] : nil!=x * nil!=w * x!=w * x->w * w->a *
                       ListE[b'](a, z) * 1. |-
      ListE[a'](x, z) * 1. (LHS Inst.) [13 <{(b', a), (d, d), (c, c), (b, b)}/
                                        {}>]
        13:
        [d < c; c < b] : nil!=x * nil!=w * x!=w * x->w * w->a *
                         ListE[a](a, z) * 1. |-
        ListE[a'](x, z) * 1. (Subst) [14 <{(d, d), (c, c), (b, b), (a, a)}/
                                      {}>]
          14:
          [d < c; c < b] : nil!=x * nil!=w * x!=w * x->w * w->y *
                           ListE[a](y, z) * 1. |-
          ListE[a'](x, z) * 1. (Backl) [2] <pre={(d, d), (c, c), (b, b),
                                                (a, a)}>
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
DEPTH 4
DEPTH 5
0:
ListO[b](y, z) * ListE[a](x, y) * 1. |- ListO[a'](x, z) * 1. (ListE L.Unf./LHS Inst.) [
1 <{(b, b), (a, a)}/{(a, c)}>]
  1:
  [c < a] : nil!=x * x->w * ListO[c](w, y) * ListO[b](y, z) * 1. |-
  ListO[a'](x, z) * 1. (ListO L.Unf./LHS Inst.,LHS Inst.) [2 <{(c, c),
                                                              (b, b), 
                                                              (a, a)}/
                                                           {(c, d), (a, d),
                                                           (a, c)}>,
  3 <{(c, c), (b, b), (a, a)}/{(c, d), (a, d), (a, c)}>]
    2:
    [d < c; c < a] : nil!=x * nil!=w * x!=w * x->w * w->y * ListO[b](y, z) *
                     1. |-
    ListO[a'](x, z) * 1. (ListO R.Unf./Simplify) [4 <{(d, d), (c, c), 
                                                     (b, b), (a, a)}/
                                                  {}>]
      4:
      [d < c; c < a] : nil!=x * nil!=w * x!=w * x->w * w->y *
                       ListO[b](y, z) * 1. |-
      [b' < a'] : x->w' * ListE[b'](w', z) * 1. (UBound Intro) [5 <{(d, d),
                                                                   (c, c),
                                                                   (b, b),
                                                                   (a, a)}/
                                                                {}>]
        5:
        [d < c; c < a] : nil!=x * nil!=w * x!=w * x->w * w->y *
                         ListO[b](y, z) * 1. |-
        x->w' * ListE[b'](w', z) * 1. (ListE R.Unf./Simplify) [6 <{(d, d),
                                                                  (c, c),
                                                                  (b, b),
                                                                  (a, a)}/
                                                               {}>]
          6:
          [d < c; c < a] : nil!=x * nil!=w * x!=w * x->w * w->y *
                           ListO[b](y, z) * 1. |-
          [a' < b'] : nil!=w' * x!=w' * x->w' * w'->y' * ListO[a'](y', z) *
                      1. (Split Id Summand) [7 <{(d, d), (c, c), (a, a)}/{}>]
            7: [d < c; c < a] :  |- [a' < b'] :  (Id)
    3:
    [d < c; c < a] : nil!=x * nil!=w * x!=w * x->w * w->a * ListE[d](a, y) *
                     ListO[b](y, z) * 1. |-
    ListO[a'](x, z) * 1. (Lemma.App) [8 <{(d, d), (c, c), (b, b), (a, a)}/{}>,
    9 <{(d, d), (c, c), (a, a)}/{(c, d), (a, d), (a, c)}>]
      8:
      [d < c; c < a] : nil!=x * nil!=w * x!=w * ListE[d](a, y) *
                       ListO[b](y, z) * 1. |-
      ListO[b'](a, z) * 1. (R.Trans.Ex) [10 <{(d, d), (c, c), (b, b), (a, a)}/
                                         {}>]
        10:
        [d < c; c < a] : nil!=x * nil!=w * x!=w * ListE[d](a, y) *
                         ListO[b](y, z) * 1. |-
        ListO[a'](a, z) * 1. (Weaken) [11 <{(d, d), (b, b)}/{}>]
          11:
          ListE[d](a, y) * ListO[b](y, z) * 1. |- ListO[a'](a, z) * 1. (Subst) [
          12 <{(d, a), (b, b)}/{}>]
            12:
            ListO[b](y, z) * ListE[a](x, y) * 1. |- ListO[a'](x, z) * 1. (Backl) [0] <pre=
            {(b, b), (a, a)}>
      9:
      [d < c; c < a] : nil!=x * nil!=w * x!=w * x->w * w->a *
                       ListO[b'](a, z) * 1. |-
      ListO[a'](x, z) * 1. (LHS Inst.) [13 <{(b', b), (d, d), (c, c), (a, a)}/
                                        {}>]
        13:
        [d < c; c < a] : nil!=x * nil!=w * x!=w * x->w * w->a *
                         ListO[b](a, z) * 1. |-
        ListO[a'](x, z) * 1. (Subst) [14 <{(d, d), (c, c), (b, b), (a, a)}/
                                      {}>]
          14:
          [d < c; c < a] : nil!=x * nil!=w * x!=w * x->w * w->y *
                           ListO[b](y, z) * 1. |-
          ListO[a'](x, z) * 1. (Backl) [2] <pre={(d, d), (c, c), (b, b),
                                                (a, a)}>
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
DEPTH 4
0:
BinListFirst[a](x) * 1. |- BinTree[a'](x) * 1. (BinListFirst L.Unf./LHS Inst.,LHS Inst.) [
1 <{(a, a)}/{(a, b)}>, 2 <{(a, a)}/{(a, b)}>]
  1:
  [b < a] : 1. |- BinTree[a'](x) * 1. (BinTree R.Unf.) [3 <{(b, b), (a, a)}/
                                                        {}>]
    3: [b < a] : 1. |- 1. (Id)
  2:
  [b < a] : nil!=x * x->y, w * BinListFirst[b](y) * 1. |- BinTree[a'](x) * 1. (BinTree R.Unf./Simplify) [
  4 <{(b, b), (a, a)}/{}>]
    4:
    [b < a] : nil!=x * x->y, w * BinListFirst[b](y) * 1. |-
    [c' < a'; b' < a'] : x->z', w' * BinTree[c'](z') * BinTree[b'](w') * 1. (UBound Intro) [
    5 <{(b, b), (a, a)}/{}>]
      5:
      [b < a] : nil!=x * x->y, w * BinListFirst[b](y) * 1. |-
      x->z', w' * BinTree[c'](z') * BinTree[b'](w') * 1. (BinTree R.Unf./Simplify) [
      6 <{(b, b), (a, a)}/{}>]
        6:
        [b < a] : nil!=x * x->y, w * BinListFirst[b](y) * 1. |-
        x->z', w' * BinTree[c'](z') * 1. (Lemma.App) [7 <{(b, b), (a, a)}/{}>,
        8 <{(b, b), (a, a)}/{(a, b)}>]
          7:
          [b < a] : nil!=x * BinListFirst[b](y) * 1. |- BinTree[a'](y) * 1. (Weaken) [
          9 <{(b, b)}/{}>]
            9:
            BinListFirst[b](y) * 1. |- BinTree[a'](y) * 1. (Subst) [10 <
                                                                    {
                                                                    (b, a)}/
                                                                    {}>]
              10:
              BinListFirst[a](x) * 1. |- BinTree[a'](x) * 1. (Backl) [0] <pre=
              {(a, a)}>
          8:
          [b < a] : nil!=x * x->y, w * BinTree[a'](y) * 1. |-
          x->z', w' * BinTree[c'](z') * 1. (Split Id Summand) [11 <{(b, b),
                                                                   (a, a)}/
                                                               {}>]
            11: [b < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
DEPTH 4
0:
BinListSecond[a](x) * 1. |- BinTree[a'](x) * 1. (BinListSecond L.Unf./LHS Inst.,LHS Inst.) [
1 <{(a, a)}/{(a, b)}>, 2 <{(a, a)}/{(a, b)}>]
  1:
  [b < a] : 1. |- BinTree[a'](x) * 1. (BinTree R.Unf.) [3 <{(b, b), (a, a)}/
                                                        {}>]
    3: [b < a] : 1. |- 1. (Id)
  2:
  [b < a] : nil!=x * x->y, w * BinListSecond[b](w) * 1. |-
  BinTree[a'](x) * 1. (BinTree R.Unf./Simplify) [4 <{(b, b), (a, a)}/{}>]
    4:
    [b < a] : nil!=x * x->y, w * BinListSecond[b](w) * 1. |-
    [c' < a'; b' < a'] : x->z', w' * BinTree[c'](z') * BinTree[b'](w') * 1. (UBound Intro) [
    5 <{(b, b), (a, a)}/{}>]
      5:
      [b < a] : nil!=x * x->y, w * BinListSecond[b](w) * 1. |-
      x->z', w' * BinTree[c'](z') * BinTree[b'](w') * 1. (BinTree R.Unf./Simplify) [
      6 <{(b, b), (a, a)}/{}>]
        6:
        [b < a] : nil!=x * x->y, w * BinListSecond[b](w) * 1. |-
        x->z', w' * BinTree[b'](w') * 1. (Lemma.App) [7 <{(b, b), (a, a)}/{}>,
        8 <{(b, b), (a, a)}/{(a, b)}>]
          7:
          [b < a] : nil!=x * BinListSecond[b](w) * 1. |- BinTree[a'](w) * 1. (Weaken) [
          9 <{(b, b)}/{}>]
            9:
            BinListSecond[b](w) * 1. |- BinTree[a'](w) * 1. (Subst) [
            10 <{(b, a)}/{}>]
              10:
              BinListSecond[a](x) * 1. |- BinTree[a'](x) * 1. (Backl) [0] <pre=
              {(a, a)}>
          8:
          [b < a] : nil!=x * x->y, w * BinTree[a'](w) * 1. |-
          x->z', w' * BinTree[b'](w') * 1. (Split Id Summand) [11 <{(b, b),
                                                                   (a, a)}/
                                                               {}>]
            11: [b < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
0:
BinPath[b](x, z) * BinPath[a](z, y) * 1. |- BinPath[a'](x, y) * 1. (BinPath L.Unf./LHS Inst.,LHS Inst.,LHS Inst./Simplify) [
1 <{(b, b), (a, a)}/{(b, c)}>, 2 <{(b, b), (a, a)}/{(b, c)}>,
3 <{(b, b), (a, a)}/{(b, c)}>]
  1: [c < b] : BinPath[a](z, y) * 1. |- BinPath[a'](z, y) * 1. (Id)
  2:
  [c < b] : nil!=x * x->w, a * BinPath[c](w, z) * BinPath[a](z, y) * 1. |-
  BinPath[a'](x, y) * 1. (BinPath R.Unf./Simplify) [4 <{(c, c), (b, b),
                                                       (a, a)}/{}>]
    4:
    [c < b] : nil!=x * x->w, a * BinPath[c](w, z) * BinPath[a](z, y) * 1. |-
    [b' < a'] : x->w', z' * BinPath[b'](w', y) * 1. (UBound Intro) [5 <
                                                                    {
                                                                    (c, c),
                                                                    (b, b),
                                                                    (a, a)}/
                                                                    {}>]
      5:
      [c < b] : nil!=x * x->w, a * BinPath[c](w, z) * BinPath[a](z, y) * 1. |-
      x->w', z' * BinPath[b'](w', y) * 1. (Lemma.App) [6 <{(c, c), (b, b),
                                                          (a, a)}/{}>,
      7 <{(c, c), (b, b)}/{(b, c)}>]
        6:
        [c < b] : nil!=x * BinPath[c](w, z) * BinPath[a](z, y) * 1. |-
        BinPath[a'](w, y) * 1. (Weaken) [8 <{(c, c), (a, a)}/{}>]
          8:
          BinPath[c](w, z) * BinPath[a](z, y) * 1. |- BinPath[a'](w, y) * 1. (Subst) [
          9 <{(c, b), (a, a)}/{}>]
            9:
            BinPath[b](x, z) * BinPath[a](z, y) * 1. |-
            BinPath[a'](x, y) * 1. (Backl) [0] <pre={(b, b), (a, a)}>
        7:
        [c < b] : nil!=x * x->w, a * BinPath[a'](w, y) * 1. |-
        x->w', z' * BinPath[b'](w', y) * 1. (Split Id Summand) [10 <{
                                                                    (c, c),
                                                                    (b, b)}/
                                                                {}>]
          10: [c < b] :  |-  (Id)
  3:
  [c < b] : nil!=x * x->w, a * BinPath[c](a, z) * BinPath[a](z, y) * 1. |-
  BinPath[a'](x, y) * 1. (BinPath R.Unf./Simplify) [11 <{(c, c), (b, b),
                                                        (a, a)}/{}>]
    11:
    [c < b] : nil!=x * x->w, a * BinPath[c](a, z) * BinPath[a](z, y) * 1. |-
    [b' < a'] : x->w', z' * BinPath[b'](z', y) * 1. (UBound Intro) [12 <
                                                                    {
                                                                    (c, c),
                                                                    (b, b),
                                                                    (a, a)}/
                                                                    {}>]
      12:
      [c < b] : nil!=x * x->w, a * BinPath[c](a, z) * BinPath[a](z, y) * 1. |-
      x->w', z' * BinPath[b'](z', y) * 1. (Lemma.App) [13 <{(c, c), (b, b),
                                                           (a, a)}/{}>,
      14 <{(c, c), (b, b)}/{(b, c)}>]
        13:
        [c < b] : nil!=x * BinPath[c](a, z) * BinPath[a](z, y) * 1. |-
        BinPath[a'](a, y) * 1. (Weaken) [15 <{(c, c), (a, a)}/{}>]
          15:
          BinPath[c](a, z) * BinPath[a](z, y) * 1. |- BinPath[a'](a, y) * 1. (Subst) [
          16 <{(c, b), (a, a)}/{}>]
            16:
            BinPath[b](x, z) * BinPath[a](z, y) * 1. |-
            BinPath[a'](x, y) * 1. (Backl) [0] <pre={(b, b), (a, a)}>
        14:
        [c < b] : nil!=x * x->w, a * BinPath[a'](a, y) * 1. |-
        x->w', z' * BinPath[b'](z', y) * 1. (Split Id Summand) [17 <{
                                                                    (c, c),
                                                                    (b, b)}/
                                                                {}>]
          17: [c < b] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
DEPTH 4
0:
BinPath[a](x, y) * 1. |- BinTreeSeg[a'](x, y) * 1. (BinPath L.Unf./LHS Inst.,LHS Inst.,LHS Inst./Simplify) [
1 <{(a, a)}/{(a, b)}>, 2 <{(a, a)}/{(a, b)}>, 3 <{(a, a)}/{(a, b)}>]
  1:
  [b < a] : 1. |- BinTreeSeg[a'](y, y) * 1. (BinTreeSeg R.Unf.) [4 <{
                                                                    (b, b),
                                                                    (a, a)}/
                                                                 {}>]
    4: [b < a] : 1. |- 1. (Id)
  2:
  [b < a] : nil!=x * x->w, z * BinPath[b](w, y) * 1. |-
  BinTreeSeg[a'](x, y) * 1. (BinTreeSeg R.Unf./Simplify) [5 <{(b, b), (a, a)}/
                                                          {}>]
    5:
    [b < a] : nil!=x * x->w, z * BinPath[b](w, y) * 1. |-
    [c' < a'; b' < a'] : x->w', z' * BinTreeSeg[c'](w', y) *
                         BinTree[b'](z') * 1. (UBound Intro) [6 <{(b, b),
                                                                 (a, a)}/
                                                              {}>]
      6:
      [b < a] : nil!=x * x->w, z * BinPath[b](w, y) * 1. |-
      x->w', z' * BinTreeSeg[c'](w', y) * BinTree[b'](z') * 1. (BinTree R.Unf./Simplify) [
      7 <{(b, b), (a, a)}/{}>]
        7:
        [b < a] : nil!=x * x->w, z * BinPath[b](w, y) * 1. |-
        x->w', z' * BinTreeSeg[c'](w', y) * 1. (Lemma.App) [8 <{(b, b),
                                                               (a, a)}/
                                                            {}>,
        9 <{(b, b), (a, a)}/{(a, b)}>]
          8:
          [b < a] : nil!=x * BinPath[b](w, y) * 1. |-
          BinTreeSeg[a'](w, y) * 1. (Weaken) [10 <{(b, b)}/{}>]
            10:
            BinPath[b](w, y) * 1. |- BinTreeSeg[a'](w, y) * 1. (Subst) [
            11 <{(b, a)}/{}>]
              11:
              BinPath[a](x, y) * 1. |- BinTreeSeg[a'](x, y) * 1. (Backl) [0] <pre=
              {(a, a)}>
          9:
          [b < a] : nil!=x * x->w, z * BinTreeSeg[a'](w, y) * 1. |-
          x->w', z' * BinTreeSeg[c'](w', y) * 1. (Split Id Summand) [
          12 <{(b, b), (a, a)}/{}>]
            12: [b < a] :  |-  (Id)
  3:
  [b < a] : nil!=x * x->w, z * BinPath[b](z, y) * 1. |-
  BinTreeSeg[a'](x, y) * 1. (BinTreeSeg R.Unf./Simplify) [13 <{(b, b),
                                                              (a, a)}/
                                                          {}>]
    13:
    [b < a] : nil!=x * x->w, z * BinPath[b](z, y) * 1. |-
    [c' < a'; b' < a'] : x->w', z' * BinTreeSeg[c'](z', y) *
                         BinTree[b'](w') * 1. (UBound Intro) [14 <{(b, b),
                                                                  (a, a)}/
                                                              {}>]
      14:
      [b < a] : nil!=x * x->w, z * BinPath[b](z, y) * 1. |-
      x->w', z' * BinTreeSeg[c'](z', y) * BinTree[b'](w') * 1. (BinTree R.Unf./Simplify) [
      15 <{(b, b), (a, a)}/{}>]
        15:
        [b < a] : nil!=x * x->w, z * BinPath[b](z, y) * 1. |-
        x->w', z' * BinTreeSeg[c'](z', y) * 1. (Lemma.App) [16 <{(b, b),
                                                                (a, a)}/
                                                            {}>,
        17 <{(b, b), (a, a)}/{(a, b)}>]
          16:
          [b < a] : nil!=x * BinPath[b](z, y) * 1. |-
          BinTreeSeg[a'](z, y) * 1. (Weaken) [18 <{(b, b)}/{}>]
            18:
            BinPath[b](z, y) * 1. |- BinTreeSeg[a'](z, y) * 1. (Subst) [
            19 <{(b, a)}/{}>]
              19:
              BinPath[a](x, y) * 1. |- BinTreeSeg[a'](x, y) * 1. (Backl) [0] <pre=
              {(a, a)}>
          17:
          [b < a] : nil!=x * x->w, z * BinTreeSeg[a'](z, y) * 1. |-
          x->w', z' * BinTreeSeg[c'](z', y) * 1. (Split Id Summand) [
          20 <{(b, b), (a, a)}/{}>]
            20: [b < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
DEPTH 4
DEPTH 5
DEPTH 6
NOT proved: BinTree[b](y) * BinTreeSeg[a](x, z) * 1. |- BinTree[a'](x) * 1. [TIMEOUT]
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
0:
nil!=x * x!=z * x->y * ls[a](y, z) * 1. |- ls[a'](x, z) * 1. (ls R.Unf./Simplify) [
1 <{(a, a)}/{}>]
  1:
  nil!=x * x!=z * x->y * ls[a](y, z) * 1. |-
  [b' < a'] : x->w' * ls[b'](w', z) * 1. (Split Id Summand) [2 <{}/{}>]
    2:  |- [b' < a'] :  (Ex Falso)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
0:
ls[b](x, y) * ls[a](y, nil) * 1. |- ls[a'](x, nil) * 1. (ls L.Unf./LHS Inst.,LHS Inst./Simplify) [
1 <{(b, b), (a, a)}/{(b, c)}>, 2 <{(b, b), (a, a)}/{(b, c)}>]
  1: [c < b] : ls[a](y, nil) * 1. |- ls[a'](y, nil) * 1. (Id)
  2:
  [c < b] : nil!=x * x!=y * x->w * ls[c](w, y) * ls[a](y, nil) * 1. |-
  ls[a'](x, nil) * 1. (ls R.Unf./Simplify) [3 <{(c, c), (b, b), (a, a)}/{}>]
    3:
    [c < b] : nil!=x * x!=y * x->w * ls[c](w, y) * ls[a](y, nil) * 1. |-
    [b' < a'] : x->w' * ls[b'](w', nil) * 1. (UBound Intro) [4 <{(c, c),
                                                                (b, b),
                                                                (a, a)}/
                                                             {}>]
      4:
      [c < b] : nil!=x * x!=y * x->w * ls[c](w, y) * ls[a](y, nil) * 1. |-
      x->w' * ls[b'](w', nil) * 1. (Lemma.App) [5 <{(c, c), (b, b), (a, a)}/
                                                {}>,
      6 <{(c, c), (b, b)}/{(b, c)}>]
        5:
        [c < b] : nil!=x * x!=y * ls[c](w, y) * ls[a](y, nil) * 1. |-
        ls[a'](w, nil) * 1. (Weaken) [7 <{(c, c), (a, a)}/{}>]
          7:
          ls[c](w, y) * ls[a](y, nil) * 1. |- ls[a'](w, nil) * 1. (Subst) [
          8 <{(c, b), (a, a)}/{}>]
            8:
            ls[b](x, y) * ls[a](y, nil) * 1. |- ls[a'](x, nil) * 1. (Backl) [0] <pre=
            {(b, b), (a, a)}>
        6:
        [c < b] : nil!=x * x!=y * x->w * ls[a'](w, nil) * 1. |-
        x->w' * ls[b'](w', nil) * 1. (Split Id Summand) [9 <{(c, c), (b, b)}/
                                                         {}>]
          9: [c < b] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 
DEPTH 1
DEPTH 2
DEPTH 3
DEPTH 4
0:
ListE[b](x, y) * 1. \/ ListO[a](x, y) * 1. |- List[a'](x, y) * 1. (L. Or) [
1 <{(b, b)}/{}>, 2 <{(a, a)}/{}>]
  1:
  ListE[b](x, y) * 1. |- List[a'](x, y) * 1. (List R.Unf.) [3 <{(b, b)}/{}>]
    3:
    ListE[b](x, y) * 1. |- [b' < a'] : nil!=x * x->w' * List[b'](w', y) * 1. (UBound Intro) [
    4 <{(b, b)}/{}>]
      4:
      ListE[b](x, y) * 1. |- nil!=x * x->w' * List[b'](w', y) * 1. (ListE L.Unf./LHS Inst./Simplify) [
      5 <{(b, b)}/{(b, a)}>]
        5:
        [a < b] : nil!=x * x->w * ListO[a](w, y) * 1. |-
        x->w' * List[b'](w', y) * 1. (Lemma.App) [6 <{(b, b), (a, a)}/{}>,
        7 <{(b, b), (a, a)}/{(b, a)}>]
          6:
          [a < b] : nil!=x * ListO[a](w, y) * 1. |- List[a'](w, y) * 1. (Weaken) [
          8 <{(a, a)}/{}>]
            8:
            ListO[a](w, y) * 1. |- List[a'](w, y) * 1. (Subst) [9 <{(a, a)}/
                                                                {}>]
              9:
              ListO[a](x, y) * 1. |- List[a'](x, y) * 1. (Backl) [2] <pre=
              {(a, a)}>
          7:
          [a < b] : nil!=x * x->w * List[a'](w, y) * 1. |-
          x->w' * List[b'](w', y) * 1. (Split Id Summand) [10 <{(b, b),
                                                               (a, a)}/
                                                           {}>]
            10: [a < b] :  |-  (Id)
  2:
  ListO[a](x, y) * 1. |- List[a'](x, y) * 1. (ListO L.Unf./LHS Inst.,LHS Inst.) [
  11 <{(a, a)}/{(a, b)}>, 12 <{(a, a)}/{(a, b)}>]
    11:
    [b < a] : nil!=x * x->y * 1. |- List[a'](x, y) * 1. (List R.Unf./Simplify) [
    13 <{(b, b), (a, a)}/{}>]
      13: [b < a] : nil!=x * x->y * 1. |- x->y * 1. (Id)
    12:
    [b < a] : nil!=x * x->w * ListE[b](w, y) * 1. |- List[a'](x, y) * 1. (List R.Unf./Simplify) [
    14 <{(b, b), (a, a)}/{}>]
      14:
      [b < a] : nil!=x * x->w * ListE[b](w, y) * 1. |-
      [b' < a'] : x->w' * List[b'](w', y) * 1. (UBound Intro) [15 <{(b, b),
                                                                   (a, a)}/
                                                               {}>]
        15:
        [b < a] : nil!=x * x->w * ListE[b](w, y) * 1. |-
        x->w' * List[b'](w', y) * 1. (Lemma.App) [16 <{(b, b), (a, a)}/{}>,
        17 <{(b, b), (a, a)}/{(a, b)}>]
          16:
          [b < a] : nil!=x * ListE[b](w, y) * 1. |- List[a'](w, y) * 1. (Weaken) [
          18 <{(b, b)}/{}>]
            18:
            ListE[b](w, y) * 1. |- List[a'](w, y) * 1. (Subst) [19 <{(b, b)}/
                                                                {}>]
              19:
              ListE[b](x, y) * 1. |- List[a'](x, y) * 1. (Backl) [1] <pre=
              {(b, b)}>
          17:
          [b < a] : nil!=x * x->w * List[a'](w, y) * 1. |-
          x->w' * List[b'](w', y) * 1. (Split Id Summand) [20 <{(b, b),
                                                               (a, a)}/
                                                           {}>]
            20: [b < a] :  |-  (Id)
 
 
 -----------------------NEEXT------------------------- 
 
 

